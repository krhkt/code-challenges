# https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/

# https://leetcode.com/contest/weekly-contest-271/problems/maximum-fruits-harvested-after-at-most-k-steps/
# contest note: couldn't finish this one on time -____-


# fruits array value: [position, amount]
# array is sorted by position and position is unique
#
# person starts at (starPosition) and can walk (k) steps in total

# 4 possible cases:
# 1. walk only to the left
# 2. walk only to the right
# 3. walk to the left then to the right
# 4. walk to the righjt then to the left
# the aswer should be the max of all these tests
def max_total_fruits_v1(fruits, start_pos, k)
  
end


# #region v1
# ISSUE: time limit exceeded
#
# assumption: only one change of direction makes sense
# couldn't think of any example of more than one turn happening,
# and mathematically it doesn't make sense (but I'm always wrong)
def walk_harvesting_v1(fruits, visited, movement_detail)
  return 0 if movement_detail[:steps_left].negative?

  harvested = 0

  index = movement_detail[:index]

  # harvesting current spot attempt
  if !index.nil? && !index.negative? && !visited.key?(index)
    harvested = fruits[index][1]
    visited[index] = true
  end

  axis_pos, direction, steps_left, turns_so_far = movement_detail.values_at(:axis_pos, :direction, :steps_left, :turns_so_far)

  left_index = -Float::INFINITY
  right_index = Float::INFINITY
  # doesn't know where we are, so finding the closest fruit(s)
  if index.nil?
    closest_fruits_indices = find_closest_fruits_indices(fruits, axis_pos)

    if closest_fruits_indices.size == 1
      movement_detail = movement_detail.clone
      movement_detail[:index] = closest_fruits_indices[0]
      return walk_harvesting_v1(fruits, visited, movement_detail)
    end

    # when the start_pos doesn't have fruits, it has to branch out from the start
    left_index, right_index = closest_fruits_indices
  else
    left_index, right_index = [index - 1, index + 1]
  end

  left_harvested = 0
  right_harvested = 0

  #trying to go harvest left if possible
  if left_index >= 0 && (turns_so_far.zero? || direction.negative?)
    left_axis_pos = fruits[left_index][0]
    left_movement_detail = {
      axis_pos: left_axis_pos,
      index: left_index,
      direction: -1,
      steps_left: steps_left - (axis_pos - left_axis_pos),
      turns_so_far: turns_so_far + (direction.positive? ? 1 : 0),
    }
    left_harvested = walk_harvesting_v1(fruits, visited.clone, left_movement_detail)
  end

  if right_index < fruits.size && (turns_so_far.zero? || direction.positive?)
    right_axis_pos = fruits[right_index][0]
    right_movement_detail = {
      axis_pos: right_axis_pos,
      index: right_index,
      direction: 1,
      steps_left: steps_left - (right_axis_pos - axis_pos),
      turns_so_far: turns_so_far + (direction.negative? ? 1 : 0),
    }
    right_harvested = walk_harvesting_v1(fruits, visited.clone, right_movement_detail)
  end

  harvested + (left_harvested > right_harvested ? left_harvested : right_harvested)
end

def find_closest_fruits_indices(fruits, axis_pos)
  to_the_right = Float::INFINITY
  to_the_left = -Float::INFINITY

  fruits.each_with_index do |(position, fruits), index|
    to_the_left = index if position <= axis_pos && to_the_left < position
    to_the_right = index if position >= axis_pos && to_the_right > position
  end

  (to_the_left == to_the_right) ? [to_the_left] : [to_the_left, to_the_right]
end

def max_total_fruits_v1(fruits, start_pos, k)
  return walk_harvesting_v1(fruits, {}, {
    axis_pos: start_pos,
    index: nil,
    direction: 0,
    steps_left: k,
    turns_so_far: 0
  })
end
# #endregion

#region V0
# ISSUE: stack too deep for distant fruits and a lot of steps
#
# that happens because it's not smart to call it for every step, ofc
# however, this solution is still correct
# the problem is that it ignores the fact that the array was already sorted
# -___-
def walk_harvesting_v0(fruits_hash, visited, pos, direction, steps_left)
  return 0 if steps_left.negative?

  harvested = 0
  harvested += fruits_hash[pos] unless visited.key?(pos)
  visited[pos] = true
  
  if harvested.zero? && !direction.zero?
    return walk_harvesting_v0(fruits_hash, visited.clone, pos + direction, direction, steps_left - 1)
  end

  left_harvested = walk_harvesting_v0(fruits_hash, visited.clone, pos - 1, -1, steps_left - 1)
  right_harvested = walk_harvesting_v0(fruits_hash, visited.clone, pos + 1, +1, steps_left - 1)

  harvested + (left_harvested > right_harvested ? left_harvested : right_harvested)
end

def max_total_fruits_v0(fruits, start_pos, k)
  fruits_hash = fruits.each_with_object(Hash.new(0)) do |fruit_info, hash|
    hash[fruit_info[0]] = fruit_info[1]
    hash
  end

  walk_harvesting_v0(fruits_hash, {}, start_pos, 0, k)
end
#endregion


#test area
p max_total_fruits([[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], 5, 4)

#p max_total_fruits([[200000,10000]], 200000, 200000)

#p find_closest_fruits_indices([[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]],100)


testcaseA = {
  fruits: [[1019,414],[1021,468],[1028,394],[1034,791],[1036,329],[1037,583],[1063,979],[1067,86],[1078,83],[1097,748],[1116,133],[1121,692],[1127,616],[1139,46],[1142,910],[1149,436],[1159,27],[1160,717],[1164,769],[1165,167],[1167,765],[1178,728],[1181,393],[1248,488],[1251,672],[1253,744],[1255,173],[1269,426],[1277,646],[1280,849],[1293,900],[1296,487],[1304,954],[1340,337],[1371,196],[1378,783],[1383,712],[1387,116],[1397,394],[1414,811],[1417,457],[1434,883],[1449,590],[1450,670],[1467,909],[1472,382],[1504,460],[1511,166],[1527,612],[1528,378],[1546,386],[1559,279],[1568,563],[1582,802],[1585,219],[1593,695],[1596,627],[1601,64],[1603,622],[1606,361],[1609,878],[1611,716],[1615,308],[1623,157],[1627,936],[1629,935],[1636,275],[1668,543],[1670,262],[1674,179],[1714,686],[1736,649],[1739,291],[1743,330],[1747,224],[1778,351],[1804,93],[1818,949],[1852,41],[1853,225],[1864,755],[1868,606],[1869,853],[1881,484],[1883,241],[1889,496],[1896,419],[1899,445],[1900,505],[1911,801],[1919,413],[1928,940],[1932,883],[1933,212],[1936,433],[1937,750],[1939,720],[1959,950],[1962,565],[1970,870],[1975,161],[1977,808],[1995,839],[1998,793],[2016,297],[2038,450],[2039,797],[2044,618],[2053,356],[2057,302],[2070,712],[2085,90],[2097,570],[2098,174],[2131,205],[2135,972],[2156,488],[2182,312],[2193,798],[2196,104],[2234,37],[2236,338],[2244,849],[2257,535],[2262,420],[2266,665],[2270,688],[2308,995],[2310,81],[2315,560],[2335,560],[2336,311],[2348,207],[2351,281],[2354,909],[2360,414],[2370,664],[2377,43],[2398,70],[2407,606],[2419,531],[2426,444],[2427,60],[2428,203],[2435,735],[2443,794],[2457,499],[2483,944],[2493,187],[2495,178],[2505,230],[2507,312],[2508,317],[2509,702],[2525,971],[2549,474],[2579,662],[2580,407],[2582,412],[2583,431],[2610,684],[2628,621],[2641,857],[2642,728],[2656,658],[2667,597],[2676,315],[2680,43],[2682,44],[2685,93],[2722,73],[2724,878],[2728,782],[2731,626],[2760,676],[2772,878],[2787,224],[2792,756],[2794,339],[2815,717],[2818,240],[2872,32],[2875,149],[2879,709],[2892,303],[2897,928],[2911,252],[2916,257],[2925,825],[2926,623],[2961,807],[2965,966],[2983,764],[2987,337],[2991,207],[2992,894],[2996,899],[3005,621],[3016,809],[3022,170],[3039,668],[3048,618],[3053,184],[3057,507],[3058,27],[3065,198],[3071,498],[3072,669],[3079,538],[3086,8],[3087,158],[3095,505],[3098,651],[3105,388],[3109,387],[3117,331],[3134,286],[3158,15],[3194,851],[3198,330],[3201,289],[3211,620],[3231,430],[3252,234],[3256,890],[3258,794],[3265,847],[3285,951],[3298,8],[3299,371],[3310,803],[3315,319],[3318,29],[3322,214],[3339,756],[3348,284],[3354,642],[3367,1000],[3406,182],[3408,802],[3421,964],[3433,127],[3437,706],[3440,230],[3456,108],[3459,626],[3490,853],[3506,508],[3517,943],[3532,475],[3534,665],[3537,759],[3544,531],[3553,970],[3558,270],[3563,734],[3565,324],[3567,592],[3591,62],[3603,975],[3610,457],[3617,623],[3623,417],[3627,452],[3649,164],[3668,335],[3685,461],[3690,780],[3701,638],[3707,656],[3724,232],[3730,549],[3743,498],[3765,941],[3767,529],[3810,402],[3811,945],[3819,702],[3824,313],[3825,936],[3829,972],[3833,235],[3849,746],[3862,235],[3866,822],[3876,655],[3888,985],[3889,740],[3893,237],[3906,874],[3916,456],[3921,165],[3927,708],[3950,273],[3953,87],[3960,89],[3965,835],[3966,628],[3983,985],[3986,164],[3995,488],[4013,395],[4037,438],[4041,41],[4050,815],[4054,951],[4069,254],[4072,82],[4074,553],[4086,10],[4087,416],[4111,323],[4140,977],[4167,181],[4181,182],[4218,20],[4219,163],[4226,405],[4228,747],[4245,149],[4247,604],[4252,768],[4263,199],[4287,568],[4289,732],[4296,544],[4303,837],[4318,873],[4324,337],[4332,545],[4363,816],[4364,782],[4367,82],[4370,397],[4379,633],[4385,41],[4393,946],[4420,530],[4431,500],[4441,47],[4448,108],[4468,969],[4474,843],[4490,315],[4505,935],[4512,591],[4513,387],[4516,792],[4528,438],[4532,954],[4568,398],[4569,127],[4576,948],[4581,823],[4591,845],[4606,593],[4622,975],[4641,84],[4651,33],[4669,859],[4676,238],[4683,809],[4688,773],[4690,893],[4700,554],[4712,608],[4728,61],[4758,531],[4762,362],[4764,84],[4767,57],[4781,345],[4784,778],[4785,65],[4808,536],[4810,614],[4818,761],[4825,82],[4827,536],[4831,4],[4833,861],[4844,254],[4849,888],[4862,164],[4864,114],[4870,690],[4879,327],[4887,280],[4894,851],[4895,128],[4918,74],[4927,897],[4929,400],[4950,164],[4955,17],[4961,435],[4964,427],[4967,237],[4975,758],[4977,422],[5013,280],[5029,112],[5045,628],[5048,867],[5068,372],[5069,589],[5079,281],[5083,400],[5100,42],[5102,454],[5105,329],[5111,724],[5115,381],[5117,488],[5121,397],[5132,43],[5135,317],[5141,320],[5142,86],[5148,358],[5149,342],[5151,148],[5153,358],[5157,56],[5163,595],[5175,587],[5176,232],[5178,938],[5180,86],[5181,84],[5197,654],[5202,822],[5206,653],[5209,576],[5221,579],[5223,161],[5247,388],[5248,604],[5257,370],[5268,613],[5286,370],[5288,950],[5301,502],[5302,333],[5304,312],[5331,38],[5333,762],[5334,42],[5336,740],[5341,550],[5351,253],[5352,17],[5362,852],[5367,47],[5392,196],[5396,325],[5398,911],[5403,922],[5411,517],[5426,661],[5433,393],[5442,954],[5452,642],[5454,174],[5458,648],[5464,685],[5473,261],[5478,501],[5486,348],[5487,832],[5492,344],[5493,296],[5495,143],[5497,878],[5505,604],[5507,938],[5514,510],[5518,115],[5529,749],[5531,99],[5533,130],[5536,61],[5542,487],[5547,300],[5561,737],[5581,813],[5594,806],[5623,896],[5626,772],[5638,652],[5645,101],[5654,485],[5656,715],[5665,41],[5681,26],[5682,983],[5688,635],[5691,940],[5697,339],[5713,658],[5721,724],[5733,258],[5734,233],[5757,236],[5768,98],[5772,752],[5775,136],[5781,454],[5782,793],[5784,51],[5786,771],[5797,45],[5802,520],[5818,549],[5820,781],[5821,545],[5824,288],[5826,80],[5828,545],[5839,708],[5859,687],[5862,778],[5880,400],[5901,7],[5920,709],[5921,464],[5949,454],[5958,417],[6005,69],[6006,215],[6031,898],[6035,977],[6046,39],[6052,423],[6071,304],[6076,551],[6085,347],[6089,685],[6105,159],[6119,756],[6144,640],[6148,696],[6149,729],[6151,109],[6176,970],[6179,966],[6181,206],[6221,408],[6227,681],[6236,740],[6244,86],[6251,890],[6308,101],[6315,429],[6326,918],[6328,657],[6332,617],[6333,429],[6347,54],[6358,628],[6360,970],[6364,341],[6371,852],[6374,803],[6381,549],[6399,446],[6400,333],[6406,574],[6425,849],[6430,542],[6432,632],[6438,890],[6456,845],[6465,235],[6467,364],[6485,467],[6492,565],[6496,237],[6506,192],[6510,21],[6512,720],[6515,993],[6517,861],[6527,928],[6528,941],[6532,501],[6533,854],[6554,415],[6571,436],[6572,762],[6574,602],[6599,805],[6600,968],[6617,961],[6618,274],[6650,165],[6652,641],[6654,362],[6663,821],[6668,938],[6687,371],[6689,358],[6711,341],[6715,854],[6720,931],[6731,912],[6734,861],[6740,201],[6762,21],[6771,195],[6772,737],[6779,712],[6791,439],[6806,105],[6809,141],[6813,370],[6822,311],[6823,300],[6829,48],[6830,371],[6846,649],[6853,314],[6871,910],[6872,143],[6891,298],[6894,543],[6902,799],[6904,517],[6936,361],[6938,224],[6950,573],[6961,923],[6979,516],[6986,910],[6998,981],[7000,30],[7013,654],[7018,221],[7051,857],[7062,722],[7073,929],[7077,496],[7090,344],[7092,849],[7095,743],[7100,922],[7130,558],[7133,150],[7135,872],[7145,750],[7146,203],[7180,717],[7186,807],[7192,814],[7194,139],[7195,935],[7221,634],[7228,248],[7230,181],[7238,495],[7248,736],[7266,409],[7287,589],[7293,189],[7303,676],[7309,150],[7312,7],[7321,406],[7322,625],[7337,627],[7360,850],[7378,590],[7388,589],[7407,367],[7426,99],[7427,472],[7437,346],[7480,758],[7483,691],[7485,733],[7491,521],[7496,343],[7522,194],[7548,370],[7556,278],[7560,220],[7578,175],[7583,99],[7585,93],[7589,981],[7615,768],[7622,694],[7624,183],[7628,235],[7648,860],[7664,695],[7666,632],[7687,856],[7704,980],[7707,229],[7708,326],[7717,530],[7732,491],[7735,662],[7737,133],[7739,725],[7750,864],[7751,652],[7769,78],[7772,714],[7773,861],[7779,416],[7780,703],[7781,105],[7797,889],[7810,421],[7836,409],[7837,85],[7842,376],[7846,927],[7847,468],[7849,738],[7853,282],[7854,805],[7862,692],[7873,825],[7875,138],[7876,604],[7879,1],[7893,376],[7902,567],[7906,998],[7910,48],[7947,315],[7949,290],[7960,50],[8031,99],[8048,915],[8051,454],[8075,924],[8104,102],[8106,856],[8119,675],[8120,412],[8122,482],[8125,458],[8132,943],[8143,969],[8150,847],[8153,482],[8154,161],[8159,365],[8166,395],[8177,803],[8184,268],[8211,450],[8219,932],[8245,947],[8290,228],[8296,423],[8298,589],[8306,528],[8307,161],[8332,899],[8350,302],[8364,255],[8401,961],[8402,398],[8407,499],[8412,629],[8449,213],[8474,707],[8510,649],[8511,987],[8522,824],[8546,280],[8555,311],[8564,724],[8565,731],[8578,652],[8580,409],[8591,72],[8592,905],[8613,942],[8615,943],[8617,353],[8632,851],[8636,350],[8645,324],[8652,659],[8653,268],[8655,810],[8656,489],[8702,106],[8711,127],[8737,373],[8739,392],[8745,301],[8746,542],[8748,904],[8749,592],[8750,541],[8767,370],[8783,168],[8799,126],[8801,463],[8812,979],[8835,44],[8852,839],[8876,913],[8882,198],[8896,135],[8913,51],[8932,442],[8975,494],[8979,992],[8983,365],[8986,355],[9011,665],[9039,198],[9046,641],[9057,888],[9079,244],[9087,885],[9093,103],[9105,4],[9109,863],[9130,824],[9136,931],[9139,856],[9155,919],[9157,533],[9166,508],[9173,951],[9180,36],[9191,296],[9241,198],[9250,513],[9268,589],[9276,788],[9303,836],[9311,188],[9313,280],[9328,156],[9329,356],[9335,678],[9351,584],[9356,335],[9370,253],[9375,412],[9387,538],[9396,882],[9409,30],[9412,574],[9424,982],[9428,509],[9440,266],[9452,799],[9460,436],[9464,802],[9487,705],[9494,255],[9499,120],[9507,921],[9528,978],[9574,36],[9575,7],[9580,999],[9582,368],[9604,986],[9610,151],[9612,321],[9619,701],[9626,664],[9630,538],[9637,92],[9638,733],[9641,299],[9662,160],[9666,307],[9669,679],[9682,756],[9685,229],[9702,587],[9716,814],[9745,293],[9759,458],[9765,240],[9768,162],[9796,802],[9801,534],[9807,555],[9808,661],[9820,109],[9850,893],[9874,325],[9900,203],[9915,332],[9916,382],[9935,120],[9940,965],[9941,984],[9961,233],[9964,877],[9982,415],[9984,844],[9987,332],[9992,468]],
  axis_pos: 2873,
  steps_left: 7752,
}

p max_total_fruits(*testcaseA.values_at(:fruits, :axis_pos, :steps_left))